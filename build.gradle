buildscript {

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_platform_version"
    }
}

// nebula.kotlin plugin 을 지정하면, kotlin 관련 설정을 기본적으로 설정해준다. 특히 jvm-target 1.8 을 지정해 준다.
// apply plugin: 'nebula.kotlin'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'idea'

apply plugin: 'maven'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'

apply plugin: 'org.junit.platform.gradle.plugin'

group = 'com.github.debop'
version = '1.2.1-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "joda-time:joda-time:$joda_time_version"

    testCompile "org.slf4j:slf4j-api:1.7.25"
    testCompile "ch.qos.logback:logback-classic:1.2.3"

    testCompile "org.junit.platform:junit-platform-runner:$junit_platform_version"
    testCompile "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
        javaParameters = true
        apiVersion = "1.1"
        languageVersion = "1.1"
        suppressWarnings = false
    }
}

compileTestKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

// Display detail test results in tree
junitPlatform {
    details 'tree'
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask, dependsOn: dokka) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

clean {
    delete "out/"
}

wrapper {
    gradleVersion = '4.2.1'
    distributionType = 'BIN'
}


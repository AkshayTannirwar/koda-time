buildscript {

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://dl.bintray.com/kotlin/dokka/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

        classpath 'com.palantir:jacoco-coverage:0.4.0'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
}

allprojects {
    group = 'com.github.debop'
    version = '2.0.0-SNAPSHOT'

    repositories {
        jcenter()
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'idea'

    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'


    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
        implementation "io.github.microutils:kotlin-logging:1.6.10"

        testImplementation "org.slf4j:slf4j-api:1.7.25"
        testImplementation "ch.qos.logback:logback-classic:1.2.3"


        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    compileKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = "1.8"
            javaParameters = true
            apiVersion = "1.3"
            languageVersion = "1.3"
            suppressWarnings = false
        }
    }

    compileTestKotlin {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    idea {
        module {
            downloadSources = false
            downloadJavadoc = false
        }
    }

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    dokka {
        moduleName = 'koda-time'
        outputFormat = 'html'
        outputDirectory = "$buildDir/dokka"
        jdkVersion = 8

        // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
        reportUndocumented = false

        sourceRoot {
            path = "$projectDir/src/main/kotlin"
            platforms = ["JVM"]
        }

        // Specifies the location of the project source code on the Web.
        // If provided, Dokka generates "source" links for each declaration.
        // Repeat for multiple mappings
        linkMapping {
            // Source directory
            dir = "$projectDir/src/main/kotlin"

            // URL showing where the source code can be accessed through the web browser
            url = "https://github.com/debop/koda-time/blob/master/src/main/kotlin"

            // Suffix which is used to append the line number to the URL. Use #L for GitHub
            suffix = "#L"
        }

        // Allows linking to documentation of the project's dependencies (generated with Javadoc or Dokka)
        // Repeat for multiple links
        externalDocumentationLink {
            // Root URL of the generated documentation to link with. The trailing slash is required!
            url = new URL("https://www.joda.org/joda-time/apidocs/")

            // If package-list file located in non-standard location
            // packageListUrl = new URL("file:///home/user/localdocs/package-list")
        }

    }

    task dokkaJar(type: Jar, dependsOn: dokka) {
        classifier = 'javadoc'
        from dokka.outputDirectory
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
        archives dokkaJar
    }

    configurations {
        published
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "debop"
                name "Sunghyouk Bae"
                email "sunghyouk.bae@gmail.com"
            }
        }

        scm {
            url "https://github.com/debop/koda-time"
        }
    }

    publishing {
        publications {
            bintrayJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact dokkaJar

                groupId "${project.group}"
                artifactId "${project.name}"
                version "${project.version}"

                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', "Kotlin extension functions for Java 8 Time and joda-time")
                    root.appendNode('name', "${project.name}")
                    root.appendNode("url", "https://github.com/debop/koda-time")
                    root.children().last() + pomConfig
                }
            }
        }
    }

    bintray {
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRY_KEY")
        publications = ['bintrayJava']

        dryRun = false
        publish = true

        pkg {
            repo = 'maven'
            name = "${project.name}"
            userOrg = 'debop'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/debop/kodatime.git'
            labels = ['kotlin', 'koda-time', 'joda-time']

            version {
                name = "${project.version}"
                desc = "Kotlin extensions for joda-time"
                released = new Date()
                vcsTag = "${project.version}"
            }
        }
    }

    clean {
        delete "out/"
    }

}
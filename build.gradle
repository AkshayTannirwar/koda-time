buildscript {

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
        //maven { url "https://dl.bintray.com/kotlin/kotlin-eap-1.1"}
    }
    dependencies {
        //classpath "com.netflix.nebula:nebula-kotlin-plugin:1.1.0-rc-91"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
    }
}

plugins {
    id 'nebula.kotlin' version '1.1.0-rc-91'
}


group = 'com.github.debop'
version = '1.1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        apiVersion = "1.1"
        languageVersion = "1.1"
        jvmTarget="1.8"
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib"

    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"

    compile "joda-time:joda-time:$joda_time_version"
    compile "org.joda:joda-convert:$joda_convert_version"

    testCompile "org.slf4j:slf4j-api:$slf4j_version"
    testCompile "ch.qos.logback:logback-classic:$logback_version"

    testCompile "junit:junit:$junit_version"
    testCompile "org.assertj:assertj-core:$assertj_core_java8_version"
    testCompile "org.assertj:assertj-joda-time:$assertj_joda_time_java8_version"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.compilerArgs << '-Xlint:unchecked'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

compileJava.dependsOn processResources

//    processResources.dependsOn cleanResources

artifacts {
    archives sourcesJar, javadocJar
}

test {
    ignoreFailures true
//    jvmArgs "-XX:MaxPermSize=512m"
}

defaultTasks 'clean', 'check'

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}
